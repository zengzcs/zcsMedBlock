// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patients {
  patientId                  Int     @id @unique @default(autoincrement())
  userId                     Int?    @unique
  phoneNumber                String
  name                       String?
  icNumber                   String  @unique
  email                      String?
  gender                     String
  height                     Float
  weight                     Float
  occupation                 String
  address                    String
  bloodGroup                 String?
  allergiesHistory           String
  diagnosisHistory           String
  emergentContactName        String
  emergentContactPhoneNumber String
  password                   String
  accountAddress             String
  user                       Users?  @relation(fields: [userId], references: [userId])
  authorizedDoctorsId        Int[]
  authorizedInstitutionId    Int[]
}

model PatientMedicationRecord {
  medicationRecordsId Int @id @unique @default(autoincrement())

  patientId       Int
  diagnosis       String
  medicine        String
  medicalDataHash String?
  timeStamp       DateTime @default(now())

  docterId Int
}

model MedicalInstitutions {
  medicalInstitutionId Int    @id @unique @default(autoincrement())
  userId               Int?   @unique
  user                 Users? @relation(fields: [userId], references: [userId])
  name                 String @unique
  region               String
  grade                String
  includeDoctorId      Int[]
  email                String
  password             String
  accountAddress       String
}

model Doctor {
  doctorId             Int    @id @unique @default(autoincrement())
  userId               Int?   @unique
  user                 Users? @relation(fields: [userId], references: [userId])
  medicalInstitutionId Int
  name                 String
  gender               String
  icNumber             String @unique
  phoneNumber          String
  email                String
  category             String

  password       String
  accountAddress String
}

model Users {
  userId         Int    @id @unique @default(autoincrement())
  userCategoryId Int
  name           String
  category       String
  password       String
  accountAddress String

  Patients            Patients[]
  MedicalInstitutions MedicalInstitutions[]
  Doctor              Doctor[]
  Admins              Admins[]
}

model Admins {
  adminId        Int    @id @unique @default(autoincrement())
  user           Users? @relation(fields: [userId], references: [userId])
  userId         Int?
  name           String @unique
  password       String
  accountAddress String
}
