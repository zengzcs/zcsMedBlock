// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patients {
interface Patient {
  patientId: number;
  userId?: number;
  phoneNumber: string;
  name?: string;
  icNumber: string;
  email?: string;
  gender: string;
  height: number;
  weight: number;
  occupation: string;
  address: string;
  bloodGroup?: string;
  allergiesHistory: string;
  diagnosisHistory: string;
  emergentContactName: string;
  emergentContactPhoneNumber: string;
  password: string;
  accountAddress: string;
}
  patientMedicationRecords   PatientMedicationRecord[]
  user                       Users?                    @relation(fields: [userId], references: [userId])
  Doctor                     Doctor?                   @relation(fields: [doctorDoctorId], references: [doctorId])
  doctorDoctorId             Int?
}

model PatientMedicationRecord {
  medicationRecordsId Int      @id @unique @default(autoincrement())
  patient             Patients @relation(fields: [patientId], references: [patientId])
  patientId           Int
  diagnosis           String
  medicine            String
  medicalDataHash     String?
  timeStamp           DateTime @default(now())
  doctor              Doctor   @relation(fields: [docterId], references: [doctorId])
  docterId            Int
}

model MedicalInstitutions {
  medicalInstitutionId Int      @id @unique @default(autoincrement())
  userId               Int?
  user                 Users?   @relation(fields: [userId], references: [userId])
  name                 String   @unique
  region               String
  grade                String
  doctors              Doctor[]
  email                String
  password             String
  accountAddress       String
}

model Doctor {
  doctorId                Int                       @id @unique @default(autoincrement())
  userId                  Int?
  user                    Users?                    @relation(fields: [userId], references: [userId])
  medicalInstitutionId    Int
  name                    String
  gender                  String
  icNumber                String                    @unique
  phoneNumber             String
  email                   String
  category                String
  patientsHaveAuthorized  Patients[]
  medicationIinstitution  MedicalInstitutions       @relation(fields: [medicalInstitutionId], references: [medicalInstitutionId])
  PatientMedicationRecord PatientMedicationRecord[]
  password                String
  accountAddress          String
}

model Users {
  userId              Int                   @id @unique @default(autoincrement())
  userCategoryId      Int
  name                String
  category            String
  password            String
  accountAddress      String
  Patients            Patients[]
  Doctor              Doctor[]
  MedicalInstitutions MedicalInstitutions[]
  Admins              Admins[]
}

model Admins {
  adminId        Int    @id @unique @default(autoincrement())
  user           Users? @relation(fields: [userId], references: [userId])
  userId         Int?
  name           String @unique
  password       String
  accountAddress String
}
